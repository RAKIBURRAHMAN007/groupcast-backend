"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rideRoutes = void 0;
const express_1 = require("express");
const ride_controller_1 = require("./ride.controller");
const checkAuthorization_1 = require("../../middlewares/checkAuthorization");
const user_interface_1 = require("../user/user.interface");
const validateRequest_1 = require("../../middlewares/validateRequest");
const ride_validation_1 = require("./ride.validation");
const router = (0, express_1.Router)();
router.post("/request-ride", (0, validateRequest_1.validateRequest)(ride_validation_1.requestRideSchema), (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.RIDER), ride_controller_1.rideController.requestRide);
router.post("/accept-ride/:id", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.DRIVER), ride_controller_1.rideController.acceptRide);
router.post("/reject-ride/:id", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.DRIVER), ride_controller_1.rideController.rejectRide);
router.patch("/picked-up/:id", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.DRIVER), ride_controller_1.rideController.markPickedUp);
router.patch("/in-transit/:id", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.DRIVER), ride_controller_1.rideController.markInTransit);
router.patch("/completed/:id", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.DRIVER), ride_controller_1.rideController.markCompleted);
router.get("/rideHistory", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.RIDER), ride_controller_1.rideController.getRideHistory);
router.patch("/cancel/:id", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.RIDER), ride_controller_1.rideController.cancelRide);
router.get("/get-all-ride", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.ADMIN), ride_controller_1.rideController.getAllRide);
exports.rideRoutes = router;
