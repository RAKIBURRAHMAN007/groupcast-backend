"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.driverRoutes = void 0;
const express_1 = require("express");
const checkAuthorization_1 = require("../../middlewares/checkAuthorization");
const user_interface_1 = require("../user/user.interface");
const driver_controller_1 = require("./driver.controller");
const validateRequest_1 = require("../../middlewares/validateRequest");
const driver_validation_1 = require("./driver.validation");
const router = (0, express_1.Router)();
router.post("/register", (0, validateRequest_1.validateRequest)(driver_validation_1.requestDriverRegisterSchema), (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.RIDER), driver_controller_1.driverController.requestDriverRegister);
router.patch("/approve/:id", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.ADMIN), driver_controller_1.driverController.approveDriver);
router.patch("/suspend/:id", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.ADMIN), driver_controller_1.driverController.suspendDriver);
router.post("/get-all-driver", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.ADMIN), driver_controller_1.driverController.getallDriver);
router.patch("/location", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.DRIVER), driver_controller_1.driverController.updateDriverLocation);
router.patch("/set-ability-true", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.DRIVER), driver_controller_1.driverController.setAbilityTrue);
router.patch("/set-ability-false", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.DRIVER), driver_controller_1.driverController.setAbilityFalse);
router.get("/earningHistory", (0, checkAuthorization_1.checkAuth)(user_interface_1.UserRole.DRIVER), driver_controller_1.driverController.earningHistory);
exports.driverRoutes = router;
